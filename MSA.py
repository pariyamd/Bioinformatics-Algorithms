# -*- coding: utf-8 -*-
"""bio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jv1jRdsBlhN0r3sty4MyDurPZZCO3uA3
"""

from itertools import combinations
import numpy as np

def global_align(x, y, s_match, s_mismatch, s_gap):

    A = []

    for i in range(len(y) + 1):

        A.append([0] * (len(x) + 1))

    for i in range(len(y) + 1):

        A[i][0] = s_gap * i

    for i in range(len(x) + 1):

        A[0][i] = s_gap * i

    for i in range(1, len(y) + 1):

        for j in range(1, len(x) + 1):

            A[i][j] = max(

                A[i][j - 1] + s_gap,

                A[i - 1][j] + s_gap,

                A[i - 1][j - 1] + (s_match if (y[i - 1] == x[j - 1] and y[i - 1] != '-') else 0) + (

                    s_mismatch if (y[i - 1] != x[j - 1] and y[i - 1] != '-' and x[j - 1] != '-') else 0) + (

                    s_gap if (y[i - 1] == '-' or x[j - 1] == '-') else 0)

            )

    align_X = ""

    align_Y = ""

    i = len(x)

    j = len(y)

    while i > 0 or j > 0:

        current_score = A[j][i]

        if i > 0 and j > 0 and (

                ((x[i - 1] == y[j - 1] and y[j - 1] != '-') and current_score == A[j - 1][i - 1] + s_match) or

                ((y[j - 1] != x[i - 1] and y[j - 1] != '-' and x[i - 1] != '-') and current_score == A[j - 1][

                    i - 1] + s_mismatch) or

                ((y[j - 1] == '-' or x[i - 1] == '-') and current_score == A[j - 1][i - 1] + s_gap)

        ):

            align_X = x[i - 1] + align_X

            align_Y = y[j - 1] + align_Y

            i = i - 1

            j = j - 1

        elif i > 0 and (current_score == A[j][i - 1] + s_gap):

            align_X = x[i - 1] + align_X

            align_Y = "-" + align_Y

            i = i - 1

        else:

            align_X = "-" + align_X

            align_Y = y[j - 1] + align_Y

            j = j - 1

    return ([align_X, align_Y], A[len(y)][len(x)] )


def MSA(seqs,n):
  #get pairwise alignment
  scores=np.zeros((n,n))
  alignments={}
  for i,j in combinations(range(n),2):
    (alignments[(i,j)] , scores[i][j]) =global_align(seqs[i],seqs[j],3,-1,-2)
    (alignments[(j,i)] , scores[j][i]) =global_align(seqs[j],seqs[i],3,-1,-2)
  # print(alignments)
  # find centre
  sum_scores=scores.sum(axis=0)
  centre=sum_scores.argmax()
  indexed_scores=np.insert(scores[centre][..., None], 0, range(n), axis=1)
  indexed_scores_sorted=indexed_scores[indexed_scores[:, 1].argsort()[::-1]]
  # print("centre", centre)
  # align all to centre
  first=False
  aligned=[]
  ranks=[]
  for i in range(n):
    if indexed_scores_sorted[i][0]!=centre:
      # print(indexed_scores_sorted[i][0])
      centre_seq=list(alignments[(indexed_scores_sorted[i][0],centre)][1])
      i_seq=list(alignments[(indexed_scores_sorted[i][0],centre)][0])
      if first==False:
        aligned.append(centre_seq)
        aligned.append(i_seq)
        ranks.append(centre)
        ranks.append(indexed_scores_sorted[i][0])
        first=True
        # print(aligned)
      else:
        (a,scores)=global_align(i_seq,aligned[0],3,-1,-2)
        # print("new alignment",list(a[0]),list(a[1]))
        aligned_centre=list(aligned[0]).copy()
        # print("aligned_centre",aligned_centre)
        new_centre=list(a[1])
        while "-" in new_centre:
          gap_pos=new_centre.index("-")
          if ("-" not in aligned_centre) or ("-" in aligned_centre and aligned_centre.index("-")!=gap_pos):
            for j in range(len(aligned)):##inja i+1 bud
              # print(f"inserting gap in position {gap_pos} of seq {aligned[j]}")
              aligned[j].insert(gap_pos,"-")
          try:
            aligned_centre[gap_pos]="*"
          except:
            aligned_centre.append("*")
          new_centre[gap_pos]="*"     
        aligned.append(list(a[0]))
        ranks.append(indexed_scores_sorted[i][0])
  # print(aligned, ranks)
  aligned_indexed=np.insert(aligned, 0, ranks, axis=1)
  aligned_sorted=aligned_indexed[aligned_indexed[:, 0].argsort()]
  return aligned_sorted[:,1:]

def calc_column_score(column):
  score=0
  for i,j in combinations(range(len(column)),2):
    if column[i]=="-" or column[j]=="-":
      if column[i]=="-" and column[j]=="-":
        score+=0
      else:
        score+=-2
    else:
      if column[i]==column[j]:
        score+=3
      else:
        score+=-1
  return score

def calc_score(seqs):
  tot_score=0
  for i in range(len(seqs[0])):
    tot_score+=calc_column_score(seqs[:,i])
  return tot_score

def improve(res,matches):
  new_score=calc_score(res)
  test=res.copy()
  for i in range(1,len(matches)):
    l=matches[i]-matches[i-1]-1
    if l<2:
      continue
    block=res[:,matches[i-1]+1:matches[i]]
    
    new_block=[]
    all_gaps={}
    n_new=n
    for j in range(n):
      new_row=[value for value in block[j] if value != "-"]
      if len(new_row)==0:
        all_gaps[j]=block[j]
        n_new-=1
      else:
        new_block.append(new_row)

    new_block=np.array(MSA(new_block,n_new))
    for rownum,row in all_gaps.items():
      new_block=np.insert(new_block, rownum, np.array(row), 0) 
    comparison = block == new_block
    if not comparison.all():
      test=res.copy()
      test[:,matches[i-1]+1:matches[i]]=new_block
      new_score=calc_score(test)
  return new_score,test

# inp=list(input().split())
# n=int(inp[0])
# seqs=list(map(list,(inp[1:])))
n= int(input())
seqs=[]
for i in range(n):
  seqs.append(list(input()))

scores=np.zeros((n,n))
alignments={}
for i,j in combinations(range(n),2):
  (alignments[(i,j)] , scores[i][j]) =global_align(seqs[i],seqs[j],3,-1,-2)
  (alignments[(j,i)] , scores[j][i]) =global_align(seqs[j],seqs[i],3,-1,-2)
#4  TYIMREAQYESAQ TCIVMREAYE YIMQEVQQER WRYIAMREQYES
# 5
# TAGCTACCAGGA
# CAGCTACCAGG
# TAGCTACCAGT
# CAGCTATCGCGGC
# CAGCTACCAGGA

res=MSA(seqs,n)
matches=[-1]
for i in range(len(res[0])):
  if len(set(res[:,i]))==1 and res[0,i]!="-":
    matches.append(i)
matches.append(len(res[0]))
score,msa=improve(res,matches)

print(score)
for p in msa:
  print("".join(p))

